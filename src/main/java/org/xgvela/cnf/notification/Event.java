// Copyright 2020 Mavenir
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// automatically generated by the FlatBuffers compiler, do not modify
package org.xgvela.cnf.notification;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public final class Event extends Table {
  public static Event getRootAsEvent(ByteBuffer _bb) { return getRootAsEvent(_bb, new Event()); }
  public static Event getRootAsEvent(ByteBuffer _bb, Event obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String eventName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer eventNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long eventTime() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String containerId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer containerIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer containerIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public KeyValue managedObject(int j) { return managedObject(new KeyValue(), j); }
  public KeyValue managedObject(KeyValue obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int managedObjectLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public KeyValue managedObjectByKey(String key) { int o = __offset(10); return o != 0 ? KeyValue.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public KeyValue managedObjectByKey(KeyValue obj, String key) { int o = __offset(10); return o != 0 ? KeyValue.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public KeyValue additionalInfo(int j) { return additionalInfo(new KeyValue(), j); }
  public KeyValue additionalInfo(KeyValue obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int additionalInfoLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public KeyValue additionalInfoByKey(String key) { int o = __offset(12); return o != 0 ? KeyValue.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public KeyValue additionalInfoByKey(KeyValue obj, String key) { int o = __offset(12); return o != 0 ? KeyValue.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public KeyValue thresholdInfo(int j) { return thresholdInfo(new KeyValue(), j); }
  public KeyValue thresholdInfo(KeyValue obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int thresholdInfoLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public KeyValue thresholdInfoByKey(String key) { int o = __offset(14); return o != 0 ? KeyValue.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public KeyValue thresholdInfoByKey(KeyValue obj, String key) { int o = __offset(14); return o != 0 ? KeyValue.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public KeyValue stateChangeDefinition(int j) { return stateChangeDefinition(new KeyValue(), j); }
  public KeyValue stateChangeDefinition(KeyValue obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int stateChangeDefinitionLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public KeyValue stateChangeDefinitionByKey(String key) { int o = __offset(16); return o != 0 ? KeyValue.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public KeyValue stateChangeDefinitionByKey(KeyValue obj, String key) { int o = __offset(16); return o != 0 ? KeyValue.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public KeyValue monitoredAttributes(int j) { return monitoredAttributes(new KeyValue(), j); }
  public KeyValue monitoredAttributes(KeyValue obj, int j) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int monitoredAttributesLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public KeyValue monitoredAttributesByKey(String key) { int o = __offset(18); return o != 0 ? KeyValue.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public KeyValue monitoredAttributesByKey(KeyValue obj, String key) { int o = __offset(18); return o != 0 ? KeyValue.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public String sourceId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer sourceIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public String sourceName() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceNameAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer sourceNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }

  public static int createEvent(FlatBufferBuilder builder,
      int event_nameOffset,
      long event_time,
      int container_idOffset,
      int managed_objectOffset,
      int additional_infoOffset,
      int threshold_infoOffset,
      int state_change_definitionOffset,
      int monitored_attributesOffset,
      int source_idOffset,
      int source_nameOffset) {
    builder.startObject(10);
    Event.addEventTime(builder, event_time);
    Event.addSourceName(builder, source_nameOffset);
    Event.addSourceId(builder, source_idOffset);
    Event.addMonitoredAttributes(builder, monitored_attributesOffset);
    Event.addStateChangeDefinition(builder, state_change_definitionOffset);
    Event.addThresholdInfo(builder, threshold_infoOffset);
    Event.addAdditionalInfo(builder, additional_infoOffset);
    Event.addManagedObject(builder, managed_objectOffset);
    Event.addContainerId(builder, container_idOffset);
    Event.addEventName(builder, event_nameOffset);
    return Event.endEvent(builder);
  }

  public static void startEvent(FlatBufferBuilder builder) { builder.startObject(10); }
  public static void addEventName(FlatBufferBuilder builder, int eventNameOffset) { builder.addOffset(0, eventNameOffset, 0); }
  public static void addEventTime(FlatBufferBuilder builder, long eventTime) { builder.addLong(1, eventTime, 0L); }
  public static void addContainerId(FlatBufferBuilder builder, int containerIdOffset) { builder.addOffset(2, containerIdOffset, 0); }
  public static void addManagedObject(FlatBufferBuilder builder, int managedObjectOffset) { builder.addOffset(3, managedObjectOffset, 0); }
  public static int createManagedObjectVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startManagedObjectVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAdditionalInfo(FlatBufferBuilder builder, int additionalInfoOffset) { builder.addOffset(4, additionalInfoOffset, 0); }
  public static int createAdditionalInfoVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAdditionalInfoVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addThresholdInfo(FlatBufferBuilder builder, int thresholdInfoOffset) { builder.addOffset(5, thresholdInfoOffset, 0); }
  public static int createThresholdInfoVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startThresholdInfoVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStateChangeDefinition(FlatBufferBuilder builder, int stateChangeDefinitionOffset) { builder.addOffset(6, stateChangeDefinitionOffset, 0); }
  public static int createStateChangeDefinitionVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStateChangeDefinitionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMonitoredAttributes(FlatBufferBuilder builder, int monitoredAttributesOffset) { builder.addOffset(7, monitoredAttributesOffset, 0); }
  public static int createMonitoredAttributesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMonitoredAttributesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSourceId(FlatBufferBuilder builder, int sourceIdOffset) { builder.addOffset(8, sourceIdOffset, 0); }
  public static void addSourceName(FlatBufferBuilder builder, int sourceNameOffset) { builder.addOffset(9, sourceNameOffset, 0); }
  public static int endEvent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

